// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_tree_explainer_cpp
SEXP create_tree_explainer_cpp(const Rcpp::List& tree_model);
RcppExport SEXP _qshapr_create_tree_explainer_cpp(SEXP tree_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tree_model(tree_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(create_tree_explainer_cpp(tree_model));
    return rcpp_result_gen;
END_RCPP
}
// create_xgboost_explainer
SEXP create_xgboost_explainer(int max_depth, long double base_score, const Rcpp::List& xgb_trees);
RcppExport SEXP _qshapr_create_xgboost_explainer(SEXP max_depthSEXP, SEXP base_scoreSEXP, SEXP xgb_treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< long double >::type base_score(base_scoreSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type xgb_trees(xgb_treesSEXP);
    rcpp_result_gen = Rcpp::wrap(create_xgboost_explainer(max_depth, base_score, xgb_trees));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_summary
Rcpp::List get_tree_summary(SEXP explainer_ptr);
RcppExport SEXP _qshapr_get_tree_summary(SEXP explainer_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type explainer_ptr(explainer_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_summary(explainer_ptr));
    return rcpp_result_gen;
END_RCPP
}
// rsq
Eigen::VectorXd rsq(SEXP explainer_ptr, const Eigen::MatrixXd& x, const Eigen::VectorXd& y, const Eigen::MatrixXd& T0_x);
RcppExport SEXP _qshapr_rsq(SEXP explainer_ptrSEXP, SEXP xSEXP, SEXP ySEXP, SEXP T0_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type explainer_ptr(explainer_ptrSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type T0_x(T0_xSEXP);
    rcpp_result_gen = Rcpp::wrap(rsq(explainer_ptr, x, y, T0_x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qshapr_create_tree_explainer_cpp", (DL_FUNC) &_qshapr_create_tree_explainer_cpp, 1},
    {"_qshapr_create_xgboost_explainer", (DL_FUNC) &_qshapr_create_xgboost_explainer, 3},
    {"_qshapr_get_tree_summary", (DL_FUNC) &_qshapr_get_tree_summary, 1},
    {"_qshapr_rsq", (DL_FUNC) &_qshapr_rsq, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_qshapr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
